backopt = !temp$flagconfirm)
error <- FALSE
# returns list(multiplier, ratename, numerator, denominator, colorscheme)
if (!exists("ratename", ratevars)) {
x <- confirmGATquit()
if (x == "quit") {
ratevars <- list(ratename = "cancel")
} else {
error <- TRUE
ratevars <- list(ratename = "gat_rate")
}
}
if (ratevars$ratename == "cancel") {
mysettings$quit <- TRUE
step <- 20
} else if (ratevars$ratename == "back") {
step <- step - 1
} else if (!error) {
if (ratevars$ratename == "no_rate") {
#temp$msg <- "You have chosen not to calculate a rate."
} else {
# quality control - force numeric
while (grepl("[^0-9.,-]", ratevars$multiplier)) {
gats <- list(title = paste("Multiplier for", ratevars$ratename),
msg = paste0("Please enter a valid number for the ",
"multiplier for ", ratevars$ratename, "."),
help = paste0("Enter a valid number. \n",
"  \u2022  To continue,  click 'Next >'. \n",
"  \u2022  To return to rate settings, click '< Back'.",
"  \u2022  To quit GAT, click 'Cancel'."))
ratevars$multiplier <- inputGATvalue(title = gats$title,
help = gats$help,
message = gats$msg,
defaulttext = "10,000",
helppage = "inputGATvalue",
step = step,
backopt = !temp$flagconfirm)
if (ratevars$multiplier == "back") {
ratevars$ratename <- "back"
ratevars$multiplier <- 1
} else if (ratevars$multiplier == "cancel") {
ratevars$ratename <- "cancel"
ratevars$multiplier <- 1
mysettings$quit <- TRUE
step <- 20
}
}
ratevars$multiplier <- as.numeric(gsub(",", "", ratevars$multiplier))
# quality control - force selection of different numerator and denominator
# create a dialog specifically for this?
if (!exists("numerator", ratevars) | !exists("denominator", ratevars) |
length(ratevars$numerator) == 0 | length(ratevars$denominator) == 0) {
temp$msg <- "Please select different variables for numerator and denominator"
tcltk::tkmessageBox(title = "Please re-check variables", message = temp$msg,
type = "ok", icon = "warning")
ratevars$ratename <- "gat_rate"
error <- TRUE
} else if (ratevars$numerator == ratevars$denominator) {
temp$msg <- "Please reselect the numerator and denominator"
tcltk::tkmessageBox(title = "Please re-check variables", message = temp$msg,
type = "ok", icon = "warning")
ratevars$ratename <- "gat_rate"
error <- TRUE
}
#temp$msg <- paste0("You have chosen to calculate the rate ",
#                   ratevars$ratename, " from ", ratevars$numerator,
#                   " and ", ratevars$denominator, " with multiplier ",
#                   format(as.numeric(ratevars$multiplier), big.mark=",",
#                          scientific=FALSE),
#                   " using the color scheme ", ratevars$colorname,
#                   ". Is this correct?")
}
}
}
#if (!ratevars$ratename %in% c("back", "cancel")) {
#  temp$title <- "Confirm your rate calculation settings"
#  temp$x <- tcltk::tkmessageBox(title = temp$title, message = temp$msg,
#                                type = "okcancel", icon = "question")
#  temp$confirm <- tcltk::tclvalue(temp$x)
#  if (temp$confirm == "ok") {
#    if (temp$flagconfirm) {
#      step <- 11
#    } else {
#      step <- step + 1
#    }
#  }
#}
if (ratevars$ratename == "back") {
step <- step - 1
} else if (ratevars$ratename == "cancel") {
step <- 20
} else if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
} else {
# message: wrong kind of shapefile; repeat dialog
temp$msg <- "There are not enough numeric variables to calculate a rate."
tcltk::tkmessageBox(title = "Rate calculation not possible", type = "ok",
icon = "warning", message = temp$msg)
if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
ratevars <- list(ratename = "no_rate")
}
} # end request rate (ratevars)
temp$shp <- rgdal::readOGR(dsn = filevars$pathin,
layer = filevars$filein,
stringsAsFactors = FALSE)
temp$mapdata <- foreign::read.dbf(paste0(filevars$userin, ".dbf"),
as.is = TRUE)
temp$numerics <- checkGATvariabletypes(temp$mapdata, type = "number")
temp$old_vars <- c()
for (i in 1:ncol(temp$mapdata)) {
# possibly these can be removed entirely, but need to verify
# if removing, inform user with warning dialog
# not sure how to handle flag variable - rename it?
if (names(temp$mapdata)[i] %in%
c("old_GATx", "old_GATy", "old_GATnumIDs", "old_GATcratio",
"old_flag", "old_GATpop")) {
temp$old_vars <- c(temp$old_vars, names(temp$mapdata)[i])
}
}
if (length(temp$old_vars) > 0) {
temp$msg <- paste(temp$msg,
paste(temp$old_vars, collapse = ", "),
"were removed from the data frame.")
}
temp$mapdata <- temp$mapdata[,
names(temp$mapdata)[!names(temp$mapdata) %in%
temp$old_vars]]
for (i in 1:ncol(temp$mapdata)) {
if (names(temp$mapdata)[i] %in%
c("GATx", "GATy", "GATnumIDs", "GATcratio", "GATflag", "GATpop")) {
temp$msg <- paste(temp$msg,
"\n", names(temp$mapdata)[i], "has been changed to",
paste0("old_", names(temp$mapdata)[i], "."))
names(temp$mapdata)[i] <- paste0("old_", names(temp$mapdata)[i])
}
}
if (!temp$msg == "") {
tcltk::tkmessageBox(title = "Some variable names changed", type = "ok",
icon = "warning", message = temp$msg)
}
if (!"GATflag" %in% names(temp$mapdata)) {
temp$mapdata$GATflag <- 0
}
temp$mapflag <- temp$mapdata[temp$mapdata$GATflag == 0, ]
step = 8
while (step == 8) { # step 9: get rate settings
pb <- list(title = "NYSDOH GAT: identify rate",
label = "Selecting the rate details.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
if (length(temp$numerics) > 1) {
error <- TRUE
if (!exists("ratevars")) ratevars <- list()
while (error) {
ratevars <- inputGATrate(mapdata = temp$mapflag,
limitdenom = limitdenom,
step = step,
ratevars = ratevars,
backopt = !temp$flagconfirm)
error <- FALSE
# returns list(multiplier, ratename, numerator, denominator, colorscheme)
if (!exists("ratename", ratevars)) {
x <- confirmGATquit()
if (x == "quit") {
ratevars <- list(ratename = "cancel")
} else {
error <- TRUE
ratevars <- list(ratename = "gat_rate")
}
}
if (ratevars$ratename == "cancel") {
mysettings$quit <- TRUE
step <- 20
} else if (ratevars$ratename == "back") {
step <- step - 1
} else if (!error) {
if (ratevars$ratename == "no_rate") {
#temp$msg <- "You have chosen not to calculate a rate."
} else {
# quality control - force numeric
while (grepl("[^0-9.,-]", ratevars$multiplier)) {
gats <- list(title = paste("Multiplier for", ratevars$ratename),
msg = paste0("Please enter a valid number for the ",
"multiplier for ", ratevars$ratename, "."),
help = paste0("Enter a valid number. \n",
"  \u2022  To continue,  click 'Next >'. \n",
"  \u2022  To return to rate settings, click '< Back'.",
"  \u2022  To quit GAT, click 'Cancel'."))
ratevars$multiplier <- inputGATvalue(title = gats$title,
help = gats$help,
message = gats$msg,
defaulttext = "10,000",
helppage = "inputGATvalue",
step = step,
backopt = !temp$flagconfirm)
if (ratevars$multiplier == "back") {
ratevars$ratename <- "back"
ratevars$multiplier <- 1
} else if (ratevars$multiplier == "cancel") {
ratevars$ratename <- "cancel"
ratevars$multiplier <- 1
mysettings$quit <- TRUE
step <- 20
}
}
ratevars$multiplier <- as.numeric(gsub(",", "", ratevars$multiplier))
# quality control - force selection of different numerator and denominator
# create a dialog specifically for this?
if (!exists("numerator", ratevars) | !exists("denominator", ratevars) |
length(ratevars$numerator) == 0 | length(ratevars$denominator) == 0) {
temp$msg <- "Please select different variables for numerator and denominator"
tcltk::tkmessageBox(title = "Please re-check variables", message = temp$msg,
type = "ok", icon = "warning")
ratevars$ratename <- "gat_rate"
error <- TRUE
} else if (ratevars$numerator == ratevars$denominator) {
temp$msg <- "Please reselect the numerator and denominator"
tcltk::tkmessageBox(title = "Please re-check variables", message = temp$msg,
type = "ok", icon = "warning")
ratevars$ratename <- "gat_rate"
error <- TRUE
}
#temp$msg <- paste0("You have chosen to calculate the rate ",
#                   ratevars$ratename, " from ", ratevars$numerator,
#                   " and ", ratevars$denominator, " with multiplier ",
#                   format(as.numeric(ratevars$multiplier), big.mark=",",
#                          scientific=FALSE),
#                   " using the color scheme ", ratevars$colorname,
#                   ". Is this correct?")
}
}
}
#if (!ratevars$ratename %in% c("back", "cancel")) {
#  temp$title <- "Confirm your rate calculation settings"
#  temp$x <- tcltk::tkmessageBox(title = temp$title, message = temp$msg,
#                                type = "okcancel", icon = "question")
#  temp$confirm <- tcltk::tclvalue(temp$x)
#  if (temp$confirm == "ok") {
#    if (temp$flagconfirm) {
#      step <- 11
#    } else {
#      step <- step + 1
#    }
#  }
#}
if (ratevars$ratename == "back") {
step <- step - 1
} else if (ratevars$ratename == "cancel") {
step <- 20
} else if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
} else {
# message: wrong kind of shapefile; repeat dialog
temp$msg <- "There are not enough numeric variables to calculate a rate."
tcltk::tkmessageBox(title = "Rate calculation not possible", type = "ok",
icon = "warning", message = temp$msg)
if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
ratevars <- list(ratename = "no_rate")
}
} # end request rate (ratevars)
ratevars
ratevars <- inputGATrate(mapdata = temp$mapflag,
limitdenom = limitdenom,
step = step,
ratevars = ratevars,
backopt = !temp$flagconfirm)
ratevars
x <- ratevars$colorname
inputGATrate <- function(mapdata, defaultopt = 0,
help = "There is no help for you.",
limitdenom = TRUE, step = 9,
ratevars = NULL, backopt = TRUE) {
# define variable lists ####
gatlist1 <- checkGATvariabletypes(mapdata, type = "number")
idlist <- c()
for (i in 1:length(gatlist1)) {
x <- mapdata[, gatlist1[i]]
t <- table(x==0 | !is.finite(x))
idlist[i] <- grepl("TRUE", paste(names(t), collapse = " "))
}
if (limitdenom) {
gatlist2 <- gatlist1[idlist == FALSE] # denominator
} else {
gatlist2 = gatlist1
}
if (is.null(ratevars)) {
ratevars <- list(ratename = "gat_rate",
numerator = gatlist1[1],
denominator = gatlist2[1],
multiplier = "10,000",
colorscheme = "Blues",
colorname = "Blues")
} else if (ratevars$ratename %in% c("no_rate", "back", "cancel")) {
ratevars$ratename <- "gat_rate"
ratevars$multiplier <- "10,000"
}
helppage = "inputGATrate"
hlp <- paste0("Select your rate settings. To calculate a rate, select the desired numerator, \n",
"denominator, and color scheme from the drop-down lists. \n",
"If you do not want to calculate a rate, check the box at the top. \n",
"  \u2022  To continue,  click 'Next >'. \n",
"  \u2022  To return to boundary selection, click '< Back'. \n",
"  \u2022  To quit GAT, click 'Cancel'.")
# color vectors ####
# sequential palettes are: Blues BuGn BuPu GnBu Greens Greys Oranges OrRd
# PuBu PuBuGn PuRd Purples RdPu Reds YlGn YlGnBu YlOrBr YlOrRd
colorlist <- c("Blues", "Blue-Green", "Blue-Purple", "Green-Blue", "Greens",
"Greys", "Oranges", "Orange-Red", "Purple-Blue",
"Purple-Blue-Green", "Purple-Red", "Purples", "Red-Purple",
"Reds", "Yellow-Green", "Yellow-Green-Blue",
"Yellow-Orange-Brown", "Yellow-Orange-Red")
colors <- c("Blues", "BuGn", "BuPu", "GnBu", "Greens", "Greys", "Oranges",
"OrRd", "PuBu", "PuBuGn", "PuRd", "Purples",
"RdPu", "Reds", "YlGn", "YlGnBu", "YlOrBr", "YlOrRd")
######### create the window #########
tt <- tcltk::tktoplevel(width=450, height=250)
title <- "Enter rate settings"
tcltk::tktitle(tt) <- paste0("Step ", step, ": ", title)
tcltk::tkpack.propagate(tt, FALSE) ## Window won't resize
# create the frames
tt$tfcheck <- tcltk::tkframe(tt, width = 400, height = 30)
tt$tflists <- tcltk::tkframe(tt, width = 420, height = 110)
tt$tftexts <- tcltk::tkframe(tt, width = 400, height = 30)
tt$tfbuts <- tcltk::tkframe(tt, width = 400, height = 40)
tt$tfhoriz1 <- tcltk::tkframe(tt, width = 440, height = 2, bg = "black")
tt$tfhoriz2 <- tcltk::tkframe(tt, width = 440, height = 2, bg = "black")
tcltk::tkpack(tt$tfcheck, tt$tfhoriz1, side = "top")
tcltk::tkpack(tt$tfcheck, tt$tflists, side = "top")
tcltk::tkpack(tt$tfcheck, anchor = "w")
tcltk::tkpack(tt$tflists, tt$tfhoriz2, side = "top")
tcltk::tkpack(tt$tflists, tt$tftexts, side = "top")
tcltk::tkpack(tt$tftexts, anchor = "w")
tcltk::tkpack(tt$tftexts, tt$tfbuts, side = "top")
######### code for checkbox #########
tt$tfcheck$cb <- tcltk::tkcheckbutton(tt$tfcheck)
tt$tfcheck$cblabel <- tcltk2::tk2label(tt$tfcheck,
text = "Do NOT calculate a rate")
tt$tfcheck$cbvalue <- tcltk::tclVar("0")
tcltk::tkconfigure(tt$tfcheck$cb, variable = tt$tfcheck$cbvalue)
tcltk::tkgrid(tt$tfcheck$cb, column = 1, sticky = "e")
tcltk::tkgrid(tt$tfcheck$cblabel, column = 3, row = 0, sticky = "w")
######### code for listboxes #########
tt$tflists$list1label = tcltk2::tk2label(tt$tflists,
text = "Select the numerator")
tt$tflists$list2label = tcltk2::tk2label(tt$tflists,
text = "Select the denominator")
tt$tflists$list3label = tcltk2::tk2label(tt$tflists,
text = "Select map color scheme")
tcltk::tkgrid(tt$tflists$list1label, row = 1, column = 1, sticky = "w")
tcltk::tkgrid(tt$tflists$list2label, row = 1, column = 2, sticky = "w")
tcltk::tkgrid(tt$tflists$list3label, row = 1, column = 3, sticky = "w")
# selectmode = {single, extended}, height is of listbox
# height controls height of listbox
tt$tflists$tnum <- tcltk2::tk2listbox(tt$tflists, height = 5,
selectmode = "single",
values = gatlist1,
background = "white",
value = ratevars$numerator)
tt$tflists$tden <- tcltk2::tk2listbox(tt$tflists, height = 5,
selectmode = "single",
background = "white",
values = gatlist2,
value = ratevars$denominator)
tt$tflists$tcol <- tcltk2::tk2listbox(tt$tflists, height = 5,
selectmode = "single",
background = "white",
values = colorlist,
value = ratevars$colorname)
tcltk::tkgrid(tt$tflists$tnum, row = 2, column = 1, sticky = "e")
tcltk::tkgrid(tt$tflists$tden, row = 2, column = 2, sticky = "e")
tcltk::tkgrid(tt$tflists$tcol, row = 2, column = 3, sticky = "e")
# add note about removing variables from denominator list
if (limitdenom) {
note <- "Note: Variables with 0 or missings cannot be in the denominator."
tt$tflists$note = tcltk2::tk2label(tt$tflists, text = note)
tcltk::tkgrid(tt$tflists$note, columnspan = 4, sticky = "w")
}
######### code for text entry boxes #########
txt <- "Enter the rate multiplier\n ex. per 10,000 population"
tt$tftexts$multlabel <- tcltk2::tk2label(tt$tftexts, text = txt)
txt <- "Enter the rate variable name\n ex. cancer_incidence"
tt$tftexts$namelabel <- tcltk2::tk2label(tt$tftexts, text = txt)
tt$tftexts$perlabel <- tcltk2::tk2label(tt$tftexts, text = "  per     ")
# this should not be necessary, but debugging
if (is.null(ratevars$multiplier) | is.null(ratevars$ratename)) {
ratevars$ratename <- "gat_rate"
ratevars$multiplier <- "10,000"
}
tt$tftexts$vartext1 <- tcltk::tclVar(ratevars$multiplier)
tt$tftexts$vartext2 <- tcltk::tclVar(ratevars$ratename)
tt$tftexts$multtext <- tcltk::tkentry(tt$tftexts, width = "20",
textvariable = tt$tftexts$vartext1)
tt$tftexts$nametext <- tcltk::tkentry(tt$tftexts, width = "20",
textvariable = tt$tftexts$vartext2)
tcltk::tkgrid(tt$tftexts$namelabel, sticky = "w", padx = 5, column = 1,
row = 8, rowspan = 2, columnspan = 1) # could also use pady = 5
tcltk::tkgrid(tt$tftexts$multlabel, sticky = "w", padx = 5, column = 3,
row = 8, rowspan = 2, columnspan = 1)
tcltk::tkgrid(tt$tftexts$nametext, column = 1, row = 10, padx = 5,
sticky = "w") # text entry box
tcltk::tkgrid(tt$tftexts$perlabel, column = 2, row = 10)
tcltk::tkgrid(tt$tftexts$multtext, column = 3, row = 10, padx = 5, pady = 5,
columnspan = 2, sticky = "w") # text entry box
tcltk::tkselection.from(tt$tftexts$multtext, "0")
tcltk::tkfocus(tt$tftexts$multtext)
myenv <- new.env()
######### code for buttons #########
onOk <- function() {
multiplier <- tcltk::tclvalue(tt$tftexts$vartext1)
ratename <- tcltk::tclvalue(tt$tftexts$vartext2)
ind <- as.numeric(tcltk::tkcurselection(tt$tflists$tnum))
numerator <- gatlist1[ind + 1] # list 1
ind <- as.numeric(tcltk::tkcurselection(tt$tflists$tden))
denominator <- gatlist2[ind + 1] # list 2
ind <- as.numeric(tcltk::tkcurselection(tt$tflists$tcol))
colorscheme <- colors[ind + 1] # list 3
cbVal <- as.character(tcltk::tclvalue(tt$tfcheck$cbvalue))
tcltk::tkdestroy(tt)
if (cbVal == "1") {
ratename <- "no_rate"
}
# keep all alphabetical characters
ratename <- gsub("([^a-z|A-Z|_])", "", ratename)
# set default if user gives invalid name
if (ratename == "" | is.na(ratename)) ratename <- "gat_rate"
assign("reslist", list(ratename = ratename,
numerator = numerator,
denominator = denominator,
multiplier = multiplier,
colorscheme = colorscheme), envir=myenv)
}
onCancel <- function() {
tcltk::tkdestroy(tt)
assign("reslist", list(ratename = "cancel",
numerator = "NONE",
denominator = "NONE",
multiplier = "0",
colorscheme = "NONE"), envir=myenv)
}
onBack <- function() {
tcltk::tkdestroy(tt)
assign("reslist", list(ratename = "back",
numerator = "NONE",
denominator = "NONE",
multiplier = "0",
colorscheme = "NONE"), envir=myenv)
}
onHelp <- function() {
showGAThelp(help = hlp, helptitle = "rate settings",
helppage = helppage, step = step)
}
if (backopt) {
tt$tfbuts$BackBut <- tcltk2::tk2button(tt$tfbuts, text = "< Back",
command = onBack, width = 12)
tt$tfbuts$OkBut <- tcltk2::tk2button(tt$tfbuts, text = "Next >",
command = onOk, width = 12,
default = "active")
} else {
tt$tfbuts$OkBut <- tcltk2::tk2button(tt$tfbuts, text = "Confirm",
command = onOk, width = 12,
default = "active")
}
tt$tfbuts$CancelBut <- tcltk2::tk2button(tt$tfbuts, text = "Cancel GAT",
command = onCancel, width = 12)
tt$tfbuts$HelpBut <- tcltk2::tk2button(tt$tfbuts, text = "Help",
command = onHelp, width = 12)
# add elements to the window
if (backopt) {
tcltk::tkgrid(tt$tfbuts$BackBut, column = 1, row = 11, padx = 5,
pady = 5, padx = c(5, 0))
}
tcltk::tkgrid(tt$tfbuts$OkBut, column = 2, row = 11, padx = 5, pady = 5)
tcltk::tkgrid(tt$tfbuts$CancelBut, column = 3, row = 11, padx = 5, pady = 5)
tcltk::tkgrid(tt$tfbuts$HelpBut, column = 4, row = 11, padx = 5,
pady = 5, padx = c(0, 5))
# configure elements
if (backopt) {
tcltk::tkgrid.configure(tt$tfbuts$BackBut, sticky = "e")
}
tcltk::tkgrid.configure(tt$tfbuts$OkBut, sticky = "w")
######### end program ########
tcltk::tkwait.window(tt)
if (identical(myenv$reslist$colorscheme, character(0))) {
myenv$reslist$colorscheme <- "BuGn"
}
myenv$reslist$colorname <- colorlist[colors == myenv$reslist$colorscheme]
return(myenv$reslist) # ratevars values
} # end gatrateInput function
ratevars <- inputGATrate(mapdata = temp$mapflag,
limitdenom = limitdenom,
step = step,
ratevars = ratevars,
backopt = !temp$flagconfirm)
ratevars
browseVignettes("gatpkg")
?gatpkg
?gatpkg::gatpkg
?rep
