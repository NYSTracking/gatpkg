tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# create a list to record plots to be saved to pdf at the end.
myplots <- list()
# plot first aggregation variable
temp <- defineGATmapclasses(areaold = myshps$original,
areanew = myshps$aggregated,
aggvar = gatvars$aggregator1)
mapvars$title <- paste(gatvars$aggregator1, "Before Merging")
mapvars$titlesub = paste("Aggregation values:",
numformat(gatvars$minvalue1), "to",
numformat(as.numeric(gsub(",", "",
gatvars$maxvalue1))),
gatvars$aggregator1)
if (exclist$var1 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, "\nExclusion criteria: ",
exclist$var1, exclist$math1, numformat(exclist$val1))
}
if (exclist$var2 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, ";",
exclist$var2, exclist$math2,
numformat(exclist$val2))
}
if (exclist$var3 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, ";",
exclist$var3, exclist$math3,
numformat(exclist$val3))
}
mapvars$colcode1before <- temp$colcode1before
mapvars$colcode1after <- temp$colcode1after
myplots$aggregator1before <- plotGATmaps(area = myshps$original,
var = gatvars$aggregator1,
title.main = mapvars$title,
title.sub = mapvars$titlesub,
colcode = mapvars$colcode1before,
mapstats = TRUE)
# find the new maximums after aggregation
mapvars$titlemain = paste(gatvars$aggregator1, "After Merging")
myplots$aggregator1after <- plotGATmaps(area = myshps$aggregated,
var = gatvars$aggregator1,
title.main = mapvars$titlemain,
title.sub = mapvars$titlesub,
colcode = mapvars$colcode1after,
after = TRUE, mapstats = TRUE)
#  8. map second variable: before and after ####
step <- step + 1
if (!gatvars$aggregator2 %in% c("NONE", gatvars$aggregator1)) {
pb$label = paste("Mapping ", gatvars$aggregator2, ". Please wait.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# plot second aggregation variable, if relevant
temp <- defineGATmapclasses(myshps$original, myshps$aggregated,
gatvars$aggregator2)
mapvars$title <- paste(gatvars$aggregator2, "Before Merging")
mapvars$titlesub = paste("Aggregation values:",
numformat(gatvars$minvalue2), "to",
numformat(as.numeric(gsub(",", "",
gatvars$maxvalue2))),
gatvars$aggregator2)
if (exclist$var1 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, "\nExclusion criteria: ",
exclist$var1, exclist$math1,
numformat(exclist$val1))
}
if (exclist$var2 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, ";", exclist$var2, exclist$math2,
numformat(exclist$val2))
}
if (exclist$var3 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, ";", exclist$var3, exclist$math3,
numformat(exclist$val3))
}
mapvars$colcode2before <- temp$colcode2before
mapvars$colcode2after <- temp$colcode2after
myplots$aggregator2before <- plotGATmaps(area = myshps$original,
var = gatvars$aggregator2,
title.main = mapvars$title,
title.sub = mapvars$titlesub,
colcode = mapvars$colcode2before,
mapstats = TRUE)
mapvars$titlemain = paste(gatvars$aggregator2, "After Merging")
myplots$aggregator2after <- plotGATmaps(area = myshps$aggregated,
var = gatvars$aggregator2,
title.main = mapvars$titlemain,
title.sub = mapvars$titlesub,
colcode = mapvars$colcode2after,
after = TRUE, mapstats = TRUE)
}
#  9. map differences between old and new areas ####
step <- step + 1
pb$label = "Mapping differences before and after merging."
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# plot new and old on same map
myplots$compare <-  plotGATcompare(areaold = myshps$original,
areanew = myshps$aggregated,
mergevars = mergevars,
gatvars = gatvars)
# 10. map compactness ratio ####
step <- step + 1
pb$label = "Mapping compactness ratio after merging."
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# create thematic map of compactness ratios
gats <- list(title.main = "Compactness Ratio After Merging",
title.sub = paste("compactness ratio = area of polygon over",
"area of circle with same perimeter \n",
"1=most compact, 0=least compact"))
myplots$compactness <- plotGATmaps(area = myshps$compact,
var = "GATcratio", clr = "YlOrBr",
title.main = gats$title.main,
title.sub = gats$title.sub,
ratemap = TRUE)
# 11. map rates if needed ####
step <- step + 1
if (ratevars$ratename != "no_rate") { # map the rate, choropleth map
pb$label = paste0("Mapping rate variable ", ratevars$ratename, ".")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
gats <- list(title = paste(ratevars$ratename, "per",
format(as.numeric(ratevars$multiplier),
big.mark = ",", scientific=FALSE),
"after merging"),
sub = paste("Rate calculation:", ratevars$ratename, "=",
format(as.numeric(ratevars$multiplier),
big.mark = ",", scientific=FALSE), "*",
ratevars$numerator, "/", ratevars$denominator))
if (exclist$var1 != "NONE") {
gats$sub <- paste(gats$sub, "\nExclusion criteria: ",
exclist$var1, exclist$math1,
format(exclist$val1, big.mark=",", scientific=FALSE))
}
if (exclist$var2 != "NONE") {
gats$sub <- paste(gats$sub, ";", exclist$var2, exclist$math2,
format(exclist$val2, big.mark=",", scientific=FALSE))
}
if (exclist$var3 != "NONE") {
gats$sub <- paste(gats$sub, ";", exclist$var3, exclist$math3,
format(exclist$val3, big.mark=",", scientific=FALSE))
}
myplots$rate <- plotGATmaps(area = myshps$aggregated, var = ratevars$ratename,
clr = ratevars$colorscheme,
title.sub = gats$sub,
title.main = gats$title, ratemap = TRUE,
mapstats = TRUE)
} # end mapping new rate
# 12. save maps to pdf ####
step <- step + 1
pb$label = paste0("Writing the plots to ", filevars$fileout, "plots.pdf.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
# save the plots to a pdf file
pdf(paste0(filevars$userout, "plots.pdf"), onefile=TRUE, width = 10,
height = 7)
for (myplot in myplots) {
if (class(myplot) == "recordedplot") replayPlot(myplot)
} # only saves plots that exist
dev.off() # need to close pdf file
rm(myplots)
# save relevant objects
save(file = paste0(filevars$userout, "settings.Rdata"),
list = c("gatvars", "aggvars", "filevars", "mergevars", "ratevars",
"exclist"))
# 13. save old shapefile ####
step <- step + 1
pb <- list(title = "NYSDOH GAT: saving files",
label = paste("Writing the original shapfile to",
paste0(filevars$fileout, "in")))
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# create crosswalk of old and new ids
myshps$crosswalk <- myshps$original
myshps$crosswalk@data <- cbind(myshps$original@data,
data.frame(GATid = aggvars$IDlist))
# warnings don't make sense; they say data not written successfully,
# but shapefile is fine and data match original file
rgdal::writeOGR(myshps$crosswalk, filevars$pathout,
paste0(filevars$fileout, "in"),
driver = "ESRI Shapefile", verbose = TRUE,
overwrite_layer = TRUE)
# 14. save new shapefile ####
step <- step + 1
pb$label = paste("Writing the merged shapfile to", filevars$fileout)
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
names(myshps$compact@data) <- substr(names(myshps$compact@data), 1, 10)
ratevars$ratename <- substr(ratevars$ratename, 1, 10)
# export the map as a shapefile
rgdal::writeOGR(myshps$compact, filevars$pathout,
filevars$fileout, driver = "ESRI Shapefile",
verbose = TRUE, overwrite_layer = TRUE)
# large areas throw warnings that appear unfounded
# 15. save kml file ####
if (gatvars$savekml==TRUE) { # now includes descriptions
step <- step + 1
pb$label = "Writing the KML file."
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
writeGATkml(myshp = myshps$compact, filename = filevars$fileout,
filepath = filevars$pathout, myidvar = gatvars$myidvar)
}
# 16. save log file ####
step <- step + 1
pb$label = paste0("Writing the log to ",
paste0(filevars$fileout, ".log"), ".")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
mysettings$exists = file.exists(paste0(filevars$userout, ".shp"))
# include projection? number of aggregations? rate calculations?
# recode to read in lists (or pre-create chunks) instead of individual values?
writeGATlog(gatvars = gatvars, aggvars = aggvars, filevars = filevars,
mysettings = mysettings, area = myshps$original,
mergevars = mergevars, ratevars = ratevars, exclist = exclist)
step <- step + 1
pb$label = "GAT is finished."
tcltk::setTkProgressBar(tpb, value = 27, title = pb$title, label = pb$label)
if (mysettings$exists) {
msg <- paste0("NYS GAT is finished. Your files were saved to ",
filevars$pathout,
". \nPlease see the log file for more details.")
tcltk::tkmessageBox(title = "GAT finished", type = "ok",
icon = "info", message = msg)
msg <- paste0("\n\nThe following files have been written to the folder \n",
filevars$pathout, ": \n  ",
filevars$fileout, ".dbf \n  ",
filevars$fileout, ".prj \n  ",
filevars$fileout, ".shp \n  ",
filevars$fileout, ".shx \n  ",
filevars$fileout, "in.dbf \n  ",
filevars$fileout, "in.prj \n  ",
filevars$fileout, "in.shp \n  ",
filevars$fileout, "in.shx \n  ",
filevars$fileout, "plots.pdf \n  ",
filevars$fileout, ".log \n  ",
filevars$fileout, "settings.Rdata \n  ")
if (gatvars$savekml==TRUE) msg <- paste0(msg, filevars$fileout, ".kml \n")
msg <- paste0(msg, "\nSee the log file for more details.")
message(msg)
} else {
# the shapefile failed to write
msg <- "Something went wrong. Your shapefiles were not saved."
tcltk::tkmessageBox(title = "Shapefile save failed", type = "ok",
icon = "error", message = msg)
}
adjacent=FALSE
#  4. run aggregation loop ####
step <- step + 1
pb$label = paste0("Aggregating ", filevars$filein, ".")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
gatvars$popwt <- mergevars$centroid == "population-weighted"
aggvars <- defineGATmerge(area = myshps$original, gatvars = gatvars,
mergevars = mergevars, filevars = filevars,
pwrepeat = pwrepeat, adjacent = adjacent,
minfirst = minfirst)
#  5. aggregate areas ####
step <- step + 1
pb$label = paste("Completed", aggvars$newregno, "mergings.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
myshps$aggregated <- mergeGATareas(ratevars = ratevars, aggvars = aggvars,
idvar = gatvars$myidvar,
myshp = myshps$original)
#  6. calculate compactness ratio ####
step <- step + 1
pb$label = "Checking compactness ratio."
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# to get maximum distance (diameter of circle): max(dist(test1))
temp <- list(cratio = calculateGATcompactness(myshps$aggregated),
ncol = ncol(myshps$aggregated))
myshps$compact <- maptools::spCbind(myshps$aggregated, temp$cratio)
names(myshps$compact)[temp$ncol+1] <- "GATcratio"
#  7. map first variable: before and after ####
step <- step + 1
pb <- list(title = "NYSDOH GAT: mapping variables",
label = paste0("Mapping ", gatvars$aggregator1, ". Please wait."))
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# create a list to record plots to be saved to pdf at the end.
myplots <- list()
# plot first aggregation variable
temp <- defineGATmapclasses(areaold = myshps$original,
areanew = myshps$aggregated,
aggvar = gatvars$aggregator1)
mapvars$title <- paste(gatvars$aggregator1, "Before Merging")
mapvars$titlesub = paste("Aggregation values:",
numformat(gatvars$minvalue1), "to",
numformat(as.numeric(gsub(",", "",
gatvars$maxvalue1))),
gatvars$aggregator1)
if (exclist$var1 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, "\nExclusion criteria: ",
exclist$var1, exclist$math1, numformat(exclist$val1))
}
if (exclist$var2 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, ";",
exclist$var2, exclist$math2,
numformat(exclist$val2))
}
if (exclist$var3 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, ";",
exclist$var3, exclist$math3,
numformat(exclist$val3))
}
mapvars$colcode1before <- temp$colcode1before
mapvars$colcode1after <- temp$colcode1after
myplots$aggregator1before <- plotGATmaps(area = myshps$original,
var = gatvars$aggregator1,
title.main = mapvars$title,
title.sub = mapvars$titlesub,
colcode = mapvars$colcode1before,
mapstats = TRUE)
# find the new maximums after aggregation
mapvars$titlemain = paste(gatvars$aggregator1, "After Merging")
myplots$aggregator1after <- plotGATmaps(area = myshps$aggregated,
var = gatvars$aggregator1,
title.main = mapvars$titlemain,
title.sub = mapvars$titlesub,
colcode = mapvars$colcode1after,
after = TRUE, mapstats = TRUE)
#  8. map second variable: before and after ####
step <- step + 1
if (!gatvars$aggregator2 %in% c("NONE", gatvars$aggregator1)) {
pb$label = paste("Mapping ", gatvars$aggregator2, ". Please wait.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# plot second aggregation variable, if relevant
temp <- defineGATmapclasses(myshps$original, myshps$aggregated,
gatvars$aggregator2)
mapvars$title <- paste(gatvars$aggregator2, "Before Merging")
mapvars$titlesub = paste("Aggregation values:",
numformat(gatvars$minvalue2), "to",
numformat(as.numeric(gsub(",", "",
gatvars$maxvalue2))),
gatvars$aggregator2)
if (exclist$var1 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, "\nExclusion criteria: ",
exclist$var1, exclist$math1,
numformat(exclist$val1))
}
if (exclist$var2 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, ";", exclist$var2, exclist$math2,
numformat(exclist$val2))
}
if (exclist$var3 != "NONE") {
mapvars$titlesub <- paste(mapvars$titlesub, ";", exclist$var3, exclist$math3,
numformat(exclist$val3))
}
mapvars$colcode2before <- temp$colcode2before
mapvars$colcode2after <- temp$colcode2after
myplots$aggregator2before <- plotGATmaps(area = myshps$original,
var = gatvars$aggregator2,
title.main = mapvars$title,
title.sub = mapvars$titlesub,
colcode = mapvars$colcode2before,
mapstats = TRUE)
mapvars$titlemain = paste(gatvars$aggregator2, "After Merging")
myplots$aggregator2after <- plotGATmaps(area = myshps$aggregated,
var = gatvars$aggregator2,
title.main = mapvars$titlemain,
title.sub = mapvars$titlesub,
colcode = mapvars$colcode2after,
after = TRUE, mapstats = TRUE)
}
#  9. map differences between old and new areas ####
step <- step + 1
pb$label = "Mapping differences before and after merging."
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# plot new and old on same map
myplots$compare <-  plotGATcompare(areaold = myshps$original,
areanew = myshps$aggregated,
mergevars = mergevars,
gatvars = gatvars)
# 10. map compactness ratio ####
step <- step + 1
pb$label = "Mapping compactness ratio after merging."
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# create thematic map of compactness ratios
gats <- list(title.main = "Compactness Ratio After Merging",
title.sub = paste("compactness ratio = area of polygon over",
"area of circle with same perimeter \n",
"1=most compact, 0=least compact"))
myplots$compactness <- plotGATmaps(area = myshps$compact,
var = "GATcratio", clr = "YlOrBr",
title.main = gats$title.main,
title.sub = gats$title.sub,
ratemap = TRUE)
# 11. map rates if needed ####
step <- step + 1
if (ratevars$ratename != "no_rate") { # map the rate, choropleth map
pb$label = paste0("Mapping rate variable ", ratevars$ratename, ".")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
gats <- list(title = paste(ratevars$ratename, "per",
format(as.numeric(ratevars$multiplier),
big.mark = ",", scientific=FALSE),
"after merging"),
sub = paste("Rate calculation:", ratevars$ratename, "=",
format(as.numeric(ratevars$multiplier),
big.mark = ",", scientific=FALSE), "*",
ratevars$numerator, "/", ratevars$denominator))
if (exclist$var1 != "NONE") {
gats$sub <- paste(gats$sub, "\nExclusion criteria: ",
exclist$var1, exclist$math1,
format(exclist$val1, big.mark=",", scientific=FALSE))
}
if (exclist$var2 != "NONE") {
gats$sub <- paste(gats$sub, ";", exclist$var2, exclist$math2,
format(exclist$val2, big.mark=",", scientific=FALSE))
}
if (exclist$var3 != "NONE") {
gats$sub <- paste(gats$sub, ";", exclist$var3, exclist$math3,
format(exclist$val3, big.mark=",", scientific=FALSE))
}
myplots$rate <- plotGATmaps(area = myshps$aggregated, var = ratevars$ratename,
clr = ratevars$colorscheme,
title.sub = gats$sub,
title.main = gats$title, ratemap = TRUE,
mapstats = TRUE)
} # end mapping new rate
# 12. save maps to pdf ####
step <- step + 1
pb$label = paste0("Writing the plots to ", filevars$fileout, "plots.pdf.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
# save the plots to a pdf file
pdf(paste0(filevars$userout, "plots.pdf"), onefile=TRUE, width = 10,
height = 7)
for (myplot in myplots) {
if (class(myplot) == "recordedplot") replayPlot(myplot)
} # only saves plots that exist
dev.off() # need to close pdf file
rm(myplots)
# save relevant objects
save(file = paste0(filevars$userout, "settings.Rdata"),
list = c("gatvars", "aggvars", "filevars", "mergevars", "ratevars",
"exclist"))
# 13. save old shapefile ####
step <- step + 1
pb <- list(title = "NYSDOH GAT: saving files",
label = paste("Writing the original shapfile to",
paste0(filevars$fileout, "in")))
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
# create crosswalk of old and new ids
myshps$crosswalk <- myshps$original
myshps$crosswalk@data <- cbind(myshps$original@data,
data.frame(GATid = aggvars$IDlist))
# warnings don't make sense; they say data not written successfully,
# but shapefile is fine and data match original file
rgdal::writeOGR(myshps$crosswalk, filevars$pathout,
paste0(filevars$fileout, "in"),
driver = "ESRI Shapefile", verbose = TRUE,
overwrite_layer = TRUE)
# 14. save new shapefile ####
step <- step + 1
pb$label = paste("Writing the merged shapfile to", filevars$fileout)
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
names(myshps$compact@data) <- substr(names(myshps$compact@data), 1, 10)
ratevars$ratename <- substr(ratevars$ratename, 1, 10)
# export the map as a shapefile
rgdal::writeOGR(myshps$compact, filevars$pathout,
filevars$fileout, driver = "ESRI Shapefile",
verbose = TRUE, overwrite_layer = TRUE)
# large areas throw warnings that appear unfounded
# 15. save kml file ####
if (gatvars$savekml==TRUE) { # now includes descriptions
step <- step + 1
pb$label = "Writing the KML file."
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
writeGATkml(myshp = myshps$compact, filename = filevars$fileout,
filepath = filevars$pathout, myidvar = gatvars$myidvar)
}
# 16. save log file ####
step <- step + 1
pb$label = paste0("Writing the log to ",
paste0(filevars$fileout, ".log"), ".")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
mysettings$exists = file.exists(paste0(filevars$userout, ".shp"))
# include projection? number of aggregations? rate calculations?
# recode to read in lists (or pre-create chunks) instead of individual values?
writeGATlog(gatvars = gatvars, aggvars = aggvars, filevars = filevars,
mysettings = mysettings, area = myshps$original,
mergevars = mergevars, ratevars = ratevars, exclist = exclist)
step <- step + 1
pb$label = "GAT is finished."
tcltk::setTkProgressBar(tpb, value = 27, title = pb$title, label = pb$label)
if (mysettings$exists) {
msg <- paste0("NYS GAT is finished. Your files were saved to ",
filevars$pathout,
". \nPlease see the log file for more details.")
tcltk::tkmessageBox(title = "GAT finished", type = "ok",
icon = "info", message = msg)
msg <- paste0("\n\nThe following files have been written to the folder \n",
filevars$pathout, ": \n  ",
filevars$fileout, ".dbf \n  ",
filevars$fileout, ".prj \n  ",
filevars$fileout, ".shp \n  ",
filevars$fileout, ".shx \n  ",
filevars$fileout, "in.dbf \n  ",
filevars$fileout, "in.prj \n  ",
filevars$fileout, "in.shp \n  ",
filevars$fileout, "in.shx \n  ",
filevars$fileout, "plots.pdf \n  ",
filevars$fileout, ".log \n  ",
filevars$fileout, "settings.Rdata \n  ")
if (gatvars$savekml==TRUE) msg <- paste0(msg, filevars$fileout, ".kml \n")
msg <- paste0(msg, "\nSee the log file for more details.")
message(msg)
} else {
# the shapefile failed to write
msg <- "Something went wrong. Your shapefiles were not saved."
tcltk::tkmessageBox(title = "Shapefile save failed", type = "ok",
icon = "error", message = msg)
}
devtools::check()
devtools::build()
remove.packages("gatpkg", lib="~/R/win-library/3.6")
install.packages("P:/Sections/EHS/Abigail/SubcountyData/Rcode/gatpkg_1.60.2.tar.gz", repos = NULL, type = "source")
library(gatpkg)
browseVignettes("gatpkg")
runGATprogram(adjacent=FALSE)
runGATprogram(settings="P:/Sections/EHS/Abigail/SubcountyData/Rcode/GATtest/testdata/abby/suffulltestsettings.Rdata")
