}
}
} # end request merge type (mergevars)
while (step == 7) {
pb <- list(title = "NYSDOH GAT: identify base population",
label = "Selecting the population file.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
if (is.null(gatvars$popvar)) gatvars$popvar <- "NONE"
if (is.null(filevars$popin)) filevars$popin <- filevars$userin
if (mergevars$centroid == "population-weighted") {
error <- TRUE
while (error) {
tempfiles <- locateGATshapefile(type = "population",
myfile = filevars$popin, step = step)
error <- FALSE
if (tempfiles$userin == "cancel") {
gatvars$popvar <- "back"
} else {
filevars$popin <- tempfiles$userin
filevars$popfile <- tempfiles$filein
filevars$poppath <- tempfiles$pathin
temp$popdata <- foreign::read.dbf(paste0(filevars$popin, ".dbf"),
as.is = TRUE)
temp$popshp <- rgdal::readOGR(dsn = filevars$poppath,
layer = filevars$popfile)
temp$polys <- class(temp$popshp)
temp$popnumvars <- checkGATvariabletypes(temp$popdata, type = "number")
# add dialog specifying each issue
# add check for shapefile type (if class(shp) )
if (temp$polys != "SpatialPolygonsDataFrame") {
# message: wrong kind of shapefile; repeat dialog
temp$msg <- "The shapefile must contain polygons to be used."
tcltk::tkmessageBox(title = "Shapefile invalid", type = "ok",
icon = "error", message = temp$msg)
error <- TRUE
} else if (!is.null(temp$popnumvars)) {
gatvars$popvar <- identifyGATpopulation(varlist = temp$popnumvars,
step = step,
var = gatvars$popvar,
backopt = !temp$flagconfirm)
}
}
if (gatvars$popvar == "back") {
step <- step - 1
} else {
if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
}
rm(tempfiles)
}
} else {
if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
}
} # end request population weighting
while (step == 8) { # step 9: get rate settings
pb <- list(title = "NYSDOH GAT: identify rate",
label = "Selecting the rate details.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
if (length(temp$numerics) > 1) {
error <- TRUE
if (!exists("ratevars")) ratevars <- list()
while (error) {
ratevars <- inputGATrate(mapdata = temp$mapflag,
limitdenom = limitdenom,
step = step,
ratevars = ratevars,
backopt = !temp$flagconfirm)
error <- FALSE
# returns list(multiplier, ratename, numerator, denominator, colorscheme)
if (!exists("ratename", ratevars)) {
x <- confirmGATquit()
if (x == "quit") {
ratevars <- list(ratename = "cancel")
} else {
error <- TRUE
ratevars <- list(ratename = "gat_rate")
}
}
if (ratevars$ratename == "cancel") {
mysettings$quit <- TRUE
step <- 20
} else if (ratevars$ratename == "back") {
step <- step - 1
} else if (!error) {
if (ratevars$ratename == "no_rate") {
#temp$msg <- "You have chosen not to calculate a rate."
} else {
# quality control - force numeric
while (grepl("[^0-9.,-]", ratevars$multiplier)) {
gats <- list(title = paste("Multiplier for", ratevars$ratename),
msg = paste0("Please enter a valid number for the ",
"multiplier for ", ratevars$ratename, "."),
help = paste0("Enter a valid number. \n",
"  \u2022  To continue,  click 'Next >'. \n",
"  \u2022  To return to rate settings, click '< Back'.",
"  \u2022  To quit GAT, click 'Cancel'."))
ratevars$multiplier <- inputGATvalue(title = gats$title,
help = gats$help,
message = gats$msg,
defaulttext = "10,000",
helppage = "inputGATvalue",
step = step,
backopt = !temp$flagconfirm)
if (ratevars$multiplier == "back") {
ratevars$ratename <- "back"
ratevars$multiplier <- 1
} else if (ratevars$multiplier == "cancel") {
ratevars$ratename <- "cancel"
ratevars$multiplier <- 1
mysettings$quit <- TRUE
step <- 20
}
}
ratevars$multiplier <- as.numeric(gsub(",", "", ratevars$multiplier))
# quality control - force selection of different numerator and denominator
# create a dialog specifically for this?
if (!exists("numerator", ratevars) | !exists("denominator", ratevars) |
length(ratevars$numerator) == 0 | length(ratevars$denominator) == 0) {
temp$msg <- "Please select different variables for numerator and denominator"
tcltk::tkmessageBox(title = "Please re-check variables", message = temp$msg,
type = "ok", icon = "warning")
ratevars$ratename <- "gat_rate"
error <- TRUE
} else if (ratevars$numerator == ratevars$denominator) {
temp$msg <- "Please reselect the numerator and denominator"
tcltk::tkmessageBox(title = "Please re-check variables", message = temp$msg,
type = "ok", icon = "warning")
ratevars$ratename <- "gat_rate"
error <- TRUE
}
#temp$msg <- paste0("You have chosen to calculate the rate ",
#                   ratevars$ratename, " from ", ratevars$numerator,
#                   " and ", ratevars$denominator, " with multiplier ",
#                   format(as.numeric(ratevars$multiplier), big.mark=",",
#                          scientific=FALSE),
#                   " using the color scheme ", ratevars$colorname,
#                   ". Is this correct?")
}
}
}
#if (!ratevars$ratename %in% c("back", "cancel")) {
#  temp$title <- "Confirm your rate calculation settings"
#  temp$x <- tcltk::tkmessageBox(title = temp$title, message = temp$msg,
#                                type = "okcancel", icon = "question")
#  temp$confirm <- tcltk::tclvalue(temp$x)
#  if (temp$confirm == "ok") {
#    if (temp$flagconfirm) {
#      step <- 11
#    } else {
#      step <- step + 1
#    }
#  }
#}
if (ratevars$ratename == "back") {
step <- step - 1
} else if (ratevars$ratename == "cancel") {
step <- 20
} else if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
} else {
# message: wrong kind of shapefile; repeat dialog
temp$msg <- "There are not enough numeric variables to calculate a rate."
tcltk::tkmessageBox(title = "Rate calculation not possible", type = "ok",
icon = "warning", message = temp$msg)
if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
ratevars <- list(ratename = "no_rate")
}
} # end request rate (ratevars)
while (step == 9) {
# add an option to save the KML file
pb <- list(title = "NYSDOH GAT: save KML?",
label = "Identifying whether to save a KML file.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
temp$kml <- saveGATkml(step = step, backopt = !temp$flagconfirm)
if (temp$kml == "Yes") {
gatvars$savekml <- TRUE # save the kml
if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
} else if (temp$kml == "No") {
gatvars$savekml <- FALSE # do not save the kml
if (temp$flagconfirm) {
step <- 11
} else {
step <- step + 1
}
} else if (temp$kml == "quit") {
step <- 20
}else {
step <- step - 1
}
} # end request save KML (savekml)
while (step == 10) {
# identify the save files' name and location
pb <- list(title = "NYSDOH GAT: identify save file",
label = "Identifying the name and location of your save file.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title, label = pb$label)
saves <- saveGATfiles()
filevars$userout <- saves$userout
filevars$fileout <- saves$fileout
filevars$pathout <- saves$pathout
if (filevars$fileout == "cancel") {
mysettings$quit <- TRUE
step <- 20
} else {
step <- step + 1
}
} # end request save file (fileout)
while (step == 11) { # add dialog to confirm merge settings
pb <- list(title = "NYSDOH GAT: confirm settings",
label = "Confirming your GAT settings.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
# max value exclusions
temp$mapdata$GATflag <- calculateGATflag(exclist, temp$mapdata)
temp$mapdata$GATflag <-
ifelse(temp$mapdata[, gatvars$aggregator1] > gatvars$maxvalue1 &
temp$mapdata$GATflag == 0, 5, temp$mapdata$GATflag)
if (!gatvars$aggregator2 == gatvars$aggregator1) {
temp$mapdata$GATflag <-
ifelse(temp$mapdata[, gatvars$aggregator2] > gatvars$maxvalue2 &
temp$mapdata$GATflag == 0, 5, temp$mapdata$GATflag)
}
gatvars$exclmaxval <- sum(temp$mapdata$GATflag == 5)
temp$flagconfirm <- TRUE
error <- TRUE
gatvars$numrow <- nrow(temp$mapdata)
while (error) {
temp$cancel <- confirmGATbystep(gatvars = gatvars, ratevars = ratevars,
exclist = exclist, mergevars = mergevars,
filevars = filevars, step = step)
error <- FALSE
if (is.null(temp$cancel)) {
x <- confirmGATquit()
if (x == "quit") {
temp$cancel <- "Yes"
mysettings$quit <- TRUE
} else {
error <- TRUE
}
}
}
if (temp$cancel %in% c("Yes", "None")) {
step <- 20 # done with user input
myshps$original <- temp$shp
temp$shp@data <- temp$mapdata
} else if (temp$cancel == "back") { # now irrelevant
step <- step - 1 # go back one
} else if (temp$cancel == "cancel") {
step <- 20
mysettings$quit <- TRUE
} else if (grepl("[0-9]", temp$cancel)) {
step <- as.numeric(gsub("[^0-9]", "", temp$cancel))
}
} # end request settings confirmation (filein)
} # end while (step < 20)
confirmGATbystep <- function(gatvars, ratevars, mergevars, filevars, exclist,
savekml, step = 0) {
## initial settings ####
instruct <- paste("To modify a setting, choose it from the list and click",
"'Next >'. \n After you modify most settings, you will",
"return to this dialog. \n",
"If you modify setting 1, GAT will start over.")
fonthead <- tcltk2::tk2font.set(font = "fonthead", settings = list(family = "Segoe UI",
size = 10, bold = TRUE, italic = FALSE))
stepslist <- c("1. File to aggregate",
"2. Identifying variable",
"3. Boundary variable",
"4. Minimum and maximum values",
"5. Exclusion criteria",
"6. Merge type",
"7. Population file",
"8. Rate calculation",
"9. Save KML file",
"10. Save location",
"None")
## set up window ####
tt <- tcltk::tktoplevel()
tcltk::tktitle(tt) <- paste0("Step ", step, ": Review settings")
## define GAT settings ####
mysets <- paste0("  ", stepslist[1], ": ", filevars$userin, " \n",
"  ", stepslist[2], ": ", gatvars$myidvar, " \n",
"  ", stepslist[3], ":")
if (gatvars$boundary != "NONE") {
mysets <- paste(mysets, gatvars$boundary)
if (gatvars$rigidbound) {
mysets <- paste(mysets, "required \n")
} else {
mysets <- paste(mysets, "not required \n")
}
} else {
mysets <- paste(mysets, "None selected \n")
}
### aggregation variables ####
mysets <- paste0(mysets, "  ", stepslist[4], ": \n",
paste(rep(" ", 17), collapse = ""),
format(as.numeric(gsub(",", "", gatvars$minvalue1)),
big.mark=",", scientific=FALSE), " to ",
format(as.numeric(gsub(",", "", gatvars$maxvalue1)),
big.mark=",", scientific=FALSE), " ",
gatvars$aggregator1, "\n")
if (!gatvars$aggregator2 %in% c(gatvars$aggregator1, "NONE")) {
mysets <- paste(mysets, paste(rep(" ", 15), collapse = ""),
format(as.numeric(gsub(",", "", gatvars$minvalue2)), big.mark=",",
scientific=FALSE), "to",
format(as.numeric(gsub(",", "", gatvars$maxvalue2)),
big.mark=",", scientific=FALSE),
gatvars$aggregator2, "\n")
}
mysets <- paste(mysets, paste(rep(" ", 10), collapse = ""),
"Areas excluded (value over maximum):", gatvars$exclmaxval, "of",
gatvars$numrow, "\n")
### exclusions ####
mysets <- paste0(mysets, "  ", stepslist[5], ":")
if (exclist$var1 != "NONE" | exclist$var1 != "NONE" |
exclist$var1 != "NONE") {
if (exclist$var1 != "NONE") {
mysets <- paste(mysets, exclist$var1, exclist$math1, exclist$val1, "\n")
}
if (exclist$var2 != "NONE") {
mysets <- paste(mysets, paste(rep(" ", 36), collapse = ""),
exclist$var2, exclist$math2, exclist$val2, "\n")
}
if (exclist$var3 != "NONE") {
mysets <- paste(mysets, paste(rep(" ", 36), collapse = ""),
exclist$var3, exclist$math3, exclist$val3, "\n")
}
mysets <- paste(mysets, paste(rep(" ", 10), collapse = ""),
"Areas excluded:", exclist$flagsum, "of", gatvars$numrow, "\n")
} else {
mysets <- paste(mysets, "None selected \n")
}
### merge type ####
mysets <- paste0(mysets, "  ", stepslist[6], ":")
if (mergevars$mergeopt1 == "closest") {
mysets <- paste(mysets, "Closest", mergevars$centroid, "centroid \n")
} else if (mergevars$mergeopt1 == "least") {
mysets <- paste(mysets, "Adjacent area with the fewest", gatvars$aggregator1, "\n")
} else if (mergevars$mergeopt1 == "similar") {
mysets <- paste(mysets, "Adjacent area with the closest value of \n",
paste(rep(" ", 27), collapse = ""),
mergevars$similar1, "/", mergevars$similar2, "\n")
}
### population weighting ####
mysets <- paste0(mysets, "  ", stepslist[7], ":")
if (mergevars$centroid == "population-weighted") {
mysets <- paste(mysets, filevars$popfile, "\n",
paste(rep(" ", 10), collapse = ""),
"Population variable:", gatvars$popvar, "\n")
} else {
mysets <- paste(mysets, "Population weighting not selected \n")
}
### rate settings ####
mysets <- paste0(mysets, "  ", stepslist[8], ":")
if (ratevars$ratename == "no_rate") {
mysets <- paste(mysets, "Not selected \n")
} else {
mysets <- paste(mysets, ratevars$ratename, "=",
format(as.numeric(ratevars$multiplier), big.mark=",",
scientific=FALSE),
"*", ratevars$numerator, "/", ratevars$denominator, "\n",
paste(rep(" ", 10), collapse = ""),
"Color scheme:", ratevars$colorname, "\n")
}
### save kml ####
mysets <- paste0(mysets, "  ", stepslist[9], "?")
if (gatvars$savekml) {
mysets <- paste(mysets, "Yes \n")
} else {
mysets <- paste(mysets, "No \n")
}
### save location ####
mysets <- paste0(mysets, stepslist[10], ": ", filevars$userout)
## print GAT settings ####
tt$ins <- tcltk2::tk2label(tt, text = mysets)
tcltk::tkgrid(tt$ins, sticky = "w", padx = 5, pady = 5)
tt$insttl <- tcltk2::tk2label(tt, text = "Instructions", font = "fonthead")
tcltk::tkgrid(tt$insttl, sticky = "w", padx = 5, pady = 5)
tt$ins <- tcltk2::tk2label(tt, text = instruct)
tcltk::tkgrid(tt$ins, sticky = "w", padx = 5, pady = 5)
## request step selection ####
tt$stepdir <- tcltk::tkframe(tt)
stepvar <- tcltk::tclVar("None")
tt$stepdir$stepq <- tcltk2::tk2label(tt$stepdir,
text = "Select the setting you wish to modify:")
tt$stepdir$steplist <- tcltk::ttkcombobox(tt$stepdir, values = stepslist,
textvariable = stepvar, state = "readonly")
tcltk::tkgrid(tt$stepdir$stepq, tt$stepdir$steplist, sticky = "w",
padx = 5, pady = 5)
tcltk::tkgrid(tt$stepdir)
## help settings ####
helppage <- "confirmGATlist"
hlp <- paste0("To continue, select a setting to modify,",
" or 'Finished' if you are done, then click 'Next >',",
"\nto start over, click 'Start Over',",
"\nand to return to save file location, click '< Back',")
myenv <- new.env()
# button functions and layout
onHelp <- function() {
showGAThelp(help = hlp, helptitle = helppage, helppage = helppage,
step = step)
}
onOk <- function() {
Rbval <- tcltk::tclvalue(stepvar)
tcltk::tkdestroy(tt)
assign("myvalue", Rbval, envir=myenv)
}
onCancel <- function() {
tcltk::tkdestroy(tt)
assign("myvalue", "cancel", envir=myenv)
}
# draw buttons
tt$tf <- tcltk::tkframe(tt)
tt$tf$HelpBut <- tcltk2::tk2button(tt$tf, text="Help",
width = 12, command = onHelp)
tt$tf$OkBut <- tcltk2::tk2button(tt$tf, text = "Confirm",
width = 12, command = onOk,
default = "active")
tt$tf$CancelBut <- tcltk2::tk2button(tt$tf, text = "Cancel GAT",
width = 12, command = onCancel)
tcltk::tkgrid(tt$tf$OkBut, column = 2, row = 1, padx = 5)
tcltk::tkgrid(tt$tf$CancelBut, column = 3, row = 1, padx = 5)
tcltk::tkgrid(tt$tf$HelpBut, column = 4, row = 1, padx = 5)
tcltk::tkgrid(tt$tf, padx = 1, pady = 5)
# wait to continue ####
tcltk::tkwait.window(tt)
return(myenv$myvalue)
}
step = 11
while (step == 11) { # add dialog to confirm merge settings
pb <- list(title = "NYSDOH GAT: confirm settings",
label = "Confirming your GAT settings.")
tcltk::setTkProgressBar(tpb, value = step, title = pb$title,
label = pb$label)
# max value exclusions
temp$mapdata$GATflag <- calculateGATflag(exclist, temp$mapdata)
temp$mapdata$GATflag <-
ifelse(temp$mapdata[, gatvars$aggregator1] > gatvars$maxvalue1 &
temp$mapdata$GATflag == 0, 5, temp$mapdata$GATflag)
if (!gatvars$aggregator2 == gatvars$aggregator1) {
temp$mapdata$GATflag <-
ifelse(temp$mapdata[, gatvars$aggregator2] > gatvars$maxvalue2 &
temp$mapdata$GATflag == 0, 5, temp$mapdata$GATflag)
}
gatvars$exclmaxval <- sum(temp$mapdata$GATflag == 5)
temp$flagconfirm <- TRUE
error <- TRUE
gatvars$numrow <- nrow(temp$mapdata)
while (error) {
temp$cancel <- confirmGATbystep(gatvars = gatvars, ratevars = ratevars,
exclist = exclist, mergevars = mergevars,
filevars = filevars, step = step)
error <- FALSE
if (is.null(temp$cancel)) {
x <- confirmGATquit()
if (x == "quit") {
temp$cancel <- "Yes"
mysettings$quit <- TRUE
} else {
error <- TRUE
}
}
}
if (temp$cancel %in% c("Yes", "None")) {
step <- 20 # done with user input
myshps$original <- temp$shp
temp$shp@data <- temp$mapdata
} else if (temp$cancel == "back") { # now irrelevant
step <- step - 1 # go back one
} else if (temp$cancel == "cancel") {
step <- 20
mysettings$quit <- TRUE
} else if (grepl("[0-9]", temp$cancel)) {
step <- as.numeric(gsub("[^0-9]", "", temp$cancel))
}
} # end request settings confirmation (filein)
devtools::check()
devtools::build()
install.packages(c("bookdownplus", "broom", "cli", "digest", "forcats", "nloptr", "plyr", "quanteda", "rlang", "servr", "sp", "testthat", "xlsx"))
news(package="gatpkg")
devtools::show_news()
?devtools::show_news()
devtools::show_news(pkg = "gatpkg")
devtools::show_news(pkg = ".")
devtools::show_news()
devtools::build()
devtools::build()
install.packages("P:/Sections/EHS/Abigail/SubcountyData/Rcode/gatpkg_1.45.tar.gz", repos = NULL, type = "source")
gatpkg::runGATprogram(settings = "P:/Sections/EHS/Abigail/SubcountyData/Rcode/GATtest/final/step1a_mcd22500settings.Rdata")
news(package = "gatpkg")
knitr::opts_chunk$set(echo = TRUE)
browseVignettes("gatpkg")
?browseVignettes
?gatpkg::runGATprogram
